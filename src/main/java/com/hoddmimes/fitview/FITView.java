package com.hoddmimes.fitview;

import com.garmin.fit.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;

public class FITView extends JFrame implements MesgListener, PropertyChangeListener {
    private JPanel contentPane;
    private JPanel mBottomPanel;
    private JPanel mGraphPanel;
    private JPanel mTopPanel;
    private JPanel mVersionPanel;
    private JLabel mBuildDateLabel;
    private JLabel mVersionLabel;
    private JLabel mInfileLabel;
    private JTextField mInFileText;
    private JButton mBrowseButton;
    private JPanel mSummaryStatPanel;
    private JLabel mSumDateTimeLbl;
    private JLabel mSumMovingTimeLbl;
    private JLabel mSumAscentLbl;
    private JLabel mSubDistanceLbl;
    private JTextField mSumDateTimeTxt;
    private JTextField mSumMovingTimeTxt;
    private JTextField mSumTotalDistanceTxt;
    private JTextField mSumAscentTxt;
    private JLabel mSumAvgPowerLbl;
    private JLabel mSumAvgCadenceLbl;
    private JLabel mSumAvgHeartrateLbl;
    private JLabel mSumAvgSpeedLbl;
    private JTextField mSumAvgPowerTxt;
    private JTextField mSumAvgCandenceTxt;
    private JTextField mSumAvgHeartrateTxt;
    private JTextField mSumAvgSpeedTxt;
    private JLabel mSumMaxPowerLbl;
    private JLabel mSumMaxCadenceLbl;
    private JLabel mSumMacHeartrateLbl;
    private JLabel mSumMaxSpeedLbl;
    private JTextField mSumMaxPowerTxt;
    private JTextField mSumMaxCadenceTxt;
    private JTextField mSumMaxHeartrateTxT;
    private JTextField mSumMaxSpeedTxt;
    private JLabel mSumCaloriesLbl;
    private JTextField mSumIntervalPowerTxT;
    private JTextField mSumCaloriesTxt;
    private JTextField mSumIntervalHeartrateTxt;
    private JLabel mSumIntervalPowerLbl;
    private JLabel mSumWKgLbl;
    private JTextField mSumWKgTxt;
    private JPanel mSliderPanel;
    private JSlider mIntervalSlider;
    private JLabel mIntervalLabel;
    private JLabel mSumIntervalHeartrateLbl;
    private JPanel mSliderFillPanel;
    private JLabel mSumIntervalCandenceLbl;
    private JTextField mSumIntervalCadenceTxt;
    private JLabel mSumPwrHrLbl;
    private JTextField mSumPwrHrTxt;
    private JLabel mSumAvgVamLbl;
    private JTextField mSumAvgVamTxt;
    private JLabel mSumIntervalWKgLbl;
    private JTextField mSumIntervalWkgTxt;
    private JPanel mRiderWeightPanel;
    private JLabel mRiderWeightLbl;
    private JTextField mRiderWeightTxt;
    private JLabel mKgLbl;
    private JButton buttonOK;

    private static int INIT_POWER_SMOOTH = 0;
    private static int INIT_VAM_SMOOTH = 0;

    private PlotPanel mPlotPanel;
    private ArrayList<RecordMesg> mRecordEntries;
    private SessionMesg mSessionMessage;
    private AppConfiguration mAppCfg;
    private boolean mWeightError = false;


    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        /**
         * This method is called when the ApplicationCfg has changed.
         * The only value that will change in real time is rider weight .
         * When being changed some of the statistic summary fields needs to be
         * recalculated and updated
         */

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(5, 4, new Insets(10, 10, 10, 10), -1, -1));
        mBottomPanel = new JPanel();
        mBottomPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, 40));
        contentPane.add(mBottomPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        mInfileLabel = new JLabel();
        mInfileLabel.setText("FIT Infile");
        mBottomPanel.add(mInfileLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mInFileText = new JTextField();
        mInFileText.setToolTipText("Drag  a FIT file into the application area to load data.");
        mBottomPanel.add(mInFileText, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), new Dimension(200, -1), 0, false));
        mBrowseButton = new JButton();
        Font mBrowseButtonFont = this.$$$getFont$$$(null, Font.BOLD, 20, mBrowseButton.getFont());
        if (mBrowseButtonFont != null) mBrowseButton.setFont(mBrowseButtonFont);
        mBrowseButton.setText("...");
        mBrowseButton.setVerticalTextPosition(1);
        mBottomPanel.add(mBrowseButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 25), new Dimension(-1, 25), 0, false));
        mGraphPanel = new JPanel();
        mGraphPanel.setLayout(new BorderLayout(0, 0));
        contentPane.add(mGraphPanel, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mTopPanel = new JPanel();
        mTopPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(mTopPanel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mSummaryStatPanel = new JPanel();
        mSummaryStatPanel.setLayout(new GridLayoutManager(5, 9, new Insets(0, 0, 0, 0), -1, -1));
        mTopPanel.add(mSummaryStatPanel, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mSummaryStatPanel.setBorder(BorderFactory.createTitledBorder("Summary"));
        mSumDateTimeLbl = new JLabel();
        mSumDateTimeLbl.setText("DateTime");
        mSumDateTimeLbl.setDisplayedMnemonic('T');
        mSumDateTimeLbl.setDisplayedMnemonicIndex(4);
        mSummaryStatPanel.add(mSumDateTimeLbl, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumMovingTimeLbl = new JLabel();
        mSumMovingTimeLbl.setText("Moving Time");
        mSummaryStatPanel.add(mSumMovingTimeLbl, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAscentLbl = new JLabel();
        mSumAscentLbl.setText("Total Ascent");
        mSummaryStatPanel.add(mSumAscentLbl, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSubDistanceLbl = new JLabel();
        mSubDistanceLbl.setText("Total Distance");
        mSummaryStatPanel.add(mSubDistanceLbl, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumDateTimeTxt = new JTextField();
        mSumDateTimeTxt.setEditable(false);
        mSummaryStatPanel.add(mSumDateTimeTxt, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, -1), null, 0, false));
        mSumMovingTimeTxt = new JTextField();
        mSumMovingTimeTxt.setEditable(false);
        mSummaryStatPanel.add(mSumMovingTimeTxt, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, -1), null, 0, false));
        mSumTotalDistanceTxt = new JTextField();
        mSumTotalDistanceTxt.setEditable(false);
        mSummaryStatPanel.add(mSumTotalDistanceTxt, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(65, -1), new Dimension(80, -1), 0, false));
        mSumAscentTxt = new JTextField();
        mSumAscentTxt.setEditable(false);
        mSummaryStatPanel.add(mSumAscentTxt, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(65, -1), new Dimension(80, -1), 0, false));
        mSumAvgPowerLbl = new JLabel();
        mSumAvgPowerLbl.setText("Avg Power");
        mSummaryStatPanel.add(mSumAvgPowerLbl, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgCadenceLbl = new JLabel();
        mSumAvgCadenceLbl.setText("Avg Cadence");
        mSummaryStatPanel.add(mSumAvgCadenceLbl, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgHeartrateLbl = new JLabel();
        mSumAvgHeartrateLbl.setText("Avg Heart Rate");
        mSummaryStatPanel.add(mSumAvgHeartrateLbl, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgSpeedLbl = new JLabel();
        mSumAvgSpeedLbl.setText("Avg Speed");
        mSummaryStatPanel.add(mSumAvgSpeedLbl, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgPowerTxt = new JTextField();
        mSumAvgPowerTxt.setEditable(false);
        mSummaryStatPanel.add(mSumAvgPowerTxt, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumAvgCandenceTxt = new JTextField();
        mSumAvgCandenceTxt.setEditable(false);
        mSummaryStatPanel.add(mSumAvgCandenceTxt, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumAvgHeartrateTxt = new JTextField();
        mSumAvgHeartrateTxt.setEditable(false);
        mSummaryStatPanel.add(mSumAvgHeartrateTxt, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumAvgSpeedTxt = new JTextField();
        mSumAvgSpeedTxt.setEditable(false);
        mSummaryStatPanel.add(mSumAvgSpeedTxt, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumMaxPowerLbl = new JLabel();
        mSumMaxPowerLbl.setText("Max Power");
        mSummaryStatPanel.add(mSumMaxPowerLbl, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumMaxCadenceLbl = new JLabel();
        mSumMaxCadenceLbl.setText("Max Cadence");
        mSummaryStatPanel.add(mSumMaxCadenceLbl, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumMacHeartrateLbl = new JLabel();
        mSumMacHeartrateLbl.setText("Max Heart Rate");
        mSummaryStatPanel.add(mSumMacHeartrateLbl, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumMaxSpeedLbl = new JLabel();
        mSumMaxSpeedLbl.setText("Max Speed");
        mSummaryStatPanel.add(mSumMaxSpeedLbl, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumMaxPowerTxt = new JTextField();
        mSumMaxPowerTxt.setEditable(false);
        mSummaryStatPanel.add(mSumMaxPowerTxt, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumMaxCadenceTxt = new JTextField();
        mSumMaxCadenceTxt.setEditable(false);
        mSummaryStatPanel.add(mSumMaxCadenceTxt, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumMaxHeartrateTxT = new JTextField();
        mSumMaxHeartrateTxT.setEditable(false);
        mSummaryStatPanel.add(mSumMaxHeartrateTxT, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumMaxSpeedTxt = new JTextField();
        mSumMaxSpeedTxt.setEditable(false);
        mSummaryStatPanel.add(mSumMaxSpeedTxt, new GridConstraints(3, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumIntervalHeartrateLbl = new JLabel();
        mSumIntervalHeartrateLbl.setText("Heart Rate (10 s)");
        mSummaryStatPanel.add(mSumIntervalHeartrateLbl, new GridConstraints(2, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumIntervalPowerTxT = new JTextField();
        mSumIntervalPowerTxT.setEditable(false);
        mSumIntervalPowerTxT.setText("");
        mSummaryStatPanel.add(mSumIntervalPowerTxT, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), new Dimension(100, -1), 0, false));
        mSumIntervalHeartrateTxt = new JTextField();
        mSumIntervalHeartrateTxt.setEditable(false);
        mSummaryStatPanel.add(mSumIntervalHeartrateTxt, new GridConstraints(2, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), new Dimension(100, -1), 0, false));
        mSumIntervalPowerLbl = new JLabel();
        mSumIntervalPowerLbl.setText("Power (10s)");
        mSummaryStatPanel.add(mSumIntervalPowerLbl, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mSummaryStatPanel.add(spacer1, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        mSumCaloriesTxt = new JTextField();
        mSumCaloriesTxt.setEditable(false);
        mSummaryStatPanel.add(mSumCaloriesTxt, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, -1), new Dimension(80, -1), 0, false));
        mSumIntervalCandenceLbl = new JLabel();
        mSumIntervalCandenceLbl.setText("Candence (10 s)");
        mSummaryStatPanel.add(mSumIntervalCandenceLbl, new GridConstraints(1, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumIntervalCadenceTxt = new JTextField();
        mSumIntervalCadenceTxt.setEditable(false);
        mSummaryStatPanel.add(mSumIntervalCadenceTxt, new GridConstraints(1, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), new Dimension(100, -1), 0, false));
        mSumCaloriesLbl = new JLabel();
        mSumCaloriesLbl.setText("Calories");
        mSummaryStatPanel.add(mSumCaloriesLbl, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumPwrHrTxt = new JTextField();
        mSumPwrHrTxt.setEditable(false);
        mSummaryStatPanel.add(mSumPwrHrTxt, new GridConstraints(4, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumPwrHrLbl = new JLabel();
        mSumPwrHrLbl.setText("Power/HR");
        mSummaryStatPanel.add(mSumPwrHrLbl, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgVamLbl = new JLabel();
        mSumAvgVamLbl.setText("Avg VAM");
        mSummaryStatPanel.add(mSumAvgVamLbl, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumAvgVamTxt = new JTextField();
        mSumAvgVamTxt.setEditable(false);
        mSumAvgVamTxt.setToolTipText("Ascent speed meter / hour. ");
        mSummaryStatPanel.add(mSumAvgVamTxt, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        mSumWKgLbl = new JLabel();
        mSumWKgLbl.setText("Overall WKG");
        mSummaryStatPanel.add(mSumWKgLbl, new GridConstraints(4, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumWKgTxt = new JTextField();
        mSumWKgTxt.setEditable(false);
        mSummaryStatPanel.add(mSumWKgTxt, new GridConstraints(4, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), new Dimension(100, -1), 0, false));
        mSumIntervalWKgLbl = new JLabel();
        mSumIntervalWKgLbl.setText("WKG (10 s)");
        mSummaryStatPanel.add(mSumIntervalWKgLbl, new GridConstraints(3, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSumIntervalWkgTxt = new JTextField();
        mSumIntervalWkgTxt.setEditable(false);
        mSummaryStatPanel.add(mSumIntervalWkgTxt, new GridConstraints(3, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), new Dimension(100, -1), 0, false));
        mVersionPanel = new JPanel();
        mVersionPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mTopPanel.add(mVersionPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, 26), null, 0, false));
        mVersionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        mVersionLabel = new JLabel();
        mVersionLabel.setHorizontalAlignment(0);
        mVersionLabel.setText("Label");
        mVersionPanel.add(mVersionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mBuildDateLabel = new JLabel();
        mBuildDateLabel.setText("Label");
        mVersionPanel.add(mBuildDateLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mRiderWeightPanel = new JPanel();
        mRiderWeightPanel.setLayout(new GridLayoutManager(1, 3, new Insets(20, 0, 20, 0), -1, -1));
        mTopPanel.add(mRiderWeightPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mRiderWeightLbl = new JLabel();
        Font mRiderWeightLblFont = this.$$$getFont$$$(null, Font.ITALIC, -1, mRiderWeightLbl.getFont());
        if (mRiderWeightLblFont != null) mRiderWeightLbl.setFont(mRiderWeightLblFont);
        mRiderWeightLbl.setText("Rider Weight");
        mRiderWeightPanel.add(mRiderWeightLbl, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mKgLbl = new JLabel();
        mKgLbl.setText("kg");
        mRiderWeightPanel.add(mKgLbl, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mRiderWeightTxt = new JTextField();
        mRiderWeightPanel.add(mRiderWeightTxt, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(3, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mSliderPanel = new JPanel();
        mSliderPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 20, 0));
        contentPane.add(mSliderPanel, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mSliderPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        mSliderFillPanel = new JPanel();
        mSliderFillPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mSliderPanel.add(mSliderFillPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mSliderFillPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10), null));
        mIntervalLabel = new JLabel();
        mIntervalLabel.setEnabled(true);
        mIntervalLabel.setText("Interval Length (10 sec)");
        mSliderFillPanel.add(mIntervalLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(160, -1), null, 0, false));
        mIntervalSlider = new JSlider();
        mIntervalSlider.setToolTipText("Set interval length");
        mSliderFillPanel.add(mIntervalSlider, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(360, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }


    // Configuration parameters


    private enum IntervaType {HEART_RATE, POWER, CADENCE}

    ;

    public FITView() {
        $$$setupUI$$$();
        setContentPane(contentPane);
        mRecordEntries = new ArrayList<>(12000);
    }

    private static void setLookAndFeel(String lf) throws Exception {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                System.out.println(info.getName());
                if (lf.equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    //break;
                }
            }
        } catch (Exception e) {
            // If the given lf is not available, you can set the GUI the system
            // default L&F.
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
    }

    private int adjustValue(int pNewValue, int pMin, int pMax) {
        int tStepSize = (pNewValue >= 100) ? 10 : 5;

        int x = pNewValue / tStepSize;
        int r = (pNewValue - (x * tStepSize));
        if ((double) r > ((double) tStepSize / 2.0d)) {
            x = (x * tStepSize) + tStepSize;
        } else {
            x = (x * tStepSize);
        }
        if (x < pMin) {
            return pMin;
        }
        if (x > pMax) {
            return pMax;
        }
        return x;

    }

    private void initApp() {
        String iconName = "bikelightgray.png";
        this.setTitle("FITView");
        this.mVersionLabel.setText("FITView version: " + Build.Version);
        this.mBuildDateLabel.setText(" built: " + Build.DateAndTime);

        mIntervalSlider.setMaximum(1210);
        mIntervalSlider.setMinimum(5);
        mIntervalSlider.setExtent(5);
        mIntervalSlider.setValue(10);
        mIntervalSlider.setPaintTicks(true);
        mIntervalSlider.setMajorTickSpacing(200);
        mIntervalSlider.setMinorTickSpacing(50);


        mIntervalSlider.setToolTipText(Integer.toString(mIntervalSlider.getValue()));
        mIntervalLabel.setText("Interval Length (" + mIntervalSlider.getValue() + " sec)");

        mIntervalSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent pEvent) {
                JSlider tSlider = (JSlider) pEvent.getSource();
                if (!tSlider.getValueIsAdjusting()) {
                    int tNewValue = adjustValue(tSlider.getValue(), tSlider.getMinimum(), tSlider.getMaximum());
                    tSlider.setValue(tNewValue);
                    tSlider.setToolTipText(Double.toString(tNewValue));
                    mIntervalLabel.setText("Interval Length (" + tNewValue + " sec)");
                    mSumIntervalHeartrateLbl.setText("Heart Rate (" + tNewValue + " sec)");
                    mSumIntervalPowerLbl.setText("Power (" + tNewValue + " sec)");
                    mSumIntervalCandenceLbl.setText("Cadence (" + tNewValue + " sec)");
                    mSumIntervalWKgLbl.setText("WKG (" + tNewValue + " sec)");

                    if (mRecordEntries.size() > 0) {
                        calculateAndUpdateIntervals(tNewValue);

                    }
                }

            }
        });

        mBrowseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                FileNameExtensionFilter tFilter = new FileNameExtensionFilter("FIT training file", "fit");

                JFileChooser tChooser = new JFileChooser();
                tChooser.setMultiSelectionEnabled(false);
                tChooser.addChoosableFileFilter(tFilter);
                int tStatus = tChooser.showOpenDialog(FITView.this);
                if (tStatus == JFileChooser.APPROVE_OPTION) {
                    File tFile = tChooser.getSelectedFile();
                    mInFileText.setText(tFile.getAbsolutePath());
                }
            }
        });

        mInFileText.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                /**
                 * This method is invoked when a FIT file been provided in the mInFileText area.
                 * The user have either "dropped" a file into the file, typed a name in and entered return or
                 * or browsed and selected a file
                 */
                FITDecoder tDecoder = new FITDecoder(mInFileText.getText(), FITView.this);
                try {
                    mSessionMessage = null;
                    mRecordEntries.clear();

                    tDecoder.decode();
                    mPlotPanel.setData(mRecordEntries);
                } catch (Exception e1) {
                    e1.printStackTrace();
                    Popup.showError("FIT Decode failed", "Failed to decode file: " + mInFileText.getText() + "\n" +
                            "reason: " + e1.getMessage(), FITView.this);
                }
            }
        });

        //mInFileText.setTransferHandler(new FileDropHandler(mInFileText));
        contentPane.setTransferHandler(new FileDropHandler(mInFileText));

        try {
            URL tURL = this.getClass().getClassLoader().getResource(iconName);
            if (tURL == null) {
                tURL = this.getClass().getResource("/resources/" + iconName);
            }
            if (tURL != null) {
                System.out.println("icon-url: " + tURL.toString());
                this.setIconImage(ImageIO.read(tURL));
            } else {
                File tFile = new File("./resources/" + iconName);
                if (!tFile.exists()) {
                    tFile = new File("./fitview/resources/" + iconName);
                }
                System.out.println("icon-file: " + tFile.toString());
                this.setIconImage(ImageIO.read(tFile));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        mAppCfg = new AppConfiguration();
        mAppCfg.loadProperties();
        if (INIT_POWER_SMOOTH > 0) {
            mAppCfg.setPowerSmoothInterval(INIT_POWER_SMOOTH);
            mAppCfg.saveProperties();
        }
        if (INIT_VAM_SMOOTH > 0) {
            mAppCfg.setVAMCalculateInterval(INIT_VAM_SMOOTH);
            mAppCfg.saveProperties();
        }


        mRiderWeightTxt.setText(mAppCfg.getWeightAsString());

        mRiderWeightTxt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //System.out.println("Weight Action: " + e.toString());
                validateAndSetWeight();
            }
        });

        mRiderWeightTxt.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                //System.out.println("Rider weight focus lost ");
                validateAndSetWeight();
            }
        });


        // Add Plot Handler
        mPlotPanel = new PlotPanel(mAppCfg);
        mGraphPanel.add(mPlotPanel, BorderLayout.CENTER);
        mGraphPanel.setPreferredSize(new Dimension(800, 360));


    }

    private void validateAndSetWeight() {
        double w;
        try {
            w = mAppCfg.validateWeight(mRiderWeightTxt.getText().replace(",", "."));
            if (w == 0) {
                mRiderWeightTxt.setText("");
                //Popup.show(Popup.SEVERITY.INFO, "No value", "Please, set a rider weight value (22.0-222.0 kg)", 2000, FITView.this);
                return;
            }
            if (w == mAppCfg.mWeight) {
                return;
            }

            mAppCfg.setWeight(w);
            mAppCfg.saveProperties();
            mRiderWeightTxt.setText(mAppCfg.getWeightAsString());
        } catch (Exception e) {
            mRiderWeightTxt.setText("");
            Popup.showError("Invalid weight value", e.getMessage(), FITView.this);
        }
    }

    public static void main(String[] args) {
        try {
            FITView.setLookAndFeel("Windows"); // Nimbus
        } catch (Exception e) {
            e.printStackTrace();
        }

        parseArguments(args);
        FITView dialog = new FITView();
        dialog.initApp();
        dialog.pack();
        //dialog.setSize(new Dimension(900, 500));


        dialog.setVisible(true);

    }


    private static void parseArguments(String[] args) {
        int i = 0;
        while (i < args.length) {
            if (args[i].compareToIgnoreCase("-powerSmooth") == 0) {
                INIT_POWER_SMOOTH = Integer.parseInt(args[i + 1]);
                i++;
            }
            if (args[i].compareToIgnoreCase("-vamSmooth") == 0) {
                INIT_VAM_SMOOTH = Integer.parseInt(args[i + 1]);
                i++;
            }
            i++;
        }
    }

    private void calculateAndUpdateIntervals(int pInterval) {
        IntervalValue tMaxMinPower = FITView.this.findBestInterval(pInterval, mRecordEntries, IntervaType.POWER);
        mSumIntervalPowerTxT.setText(String.valueOf(tMaxMinPower) + " W");
        mSumIntervalPowerTxT.setText(tMaxMinPower + " W");
        if (mAppCfg.getWeight() == 0) {
            mSumIntervalWkgTxt.setText("no weight");
        } else {
            double x = tMaxMinPower.mAvgValue / mAppCfg.getWeight();
            NumberFormat nf = getNumberFormat(-1, 1);
            mSumIntervalWkgTxt.setText(nf.format(x));
        }

        IntervalValue tMaxMinCadence = FITView.this.findBestInterval(pInterval, mRecordEntries, IntervaType.CADENCE);
        mSumIntervalCadenceTxt.setText(String.valueOf(tMaxMinCadence) + " rpm");

        IntervalValue tMaxMinHeart = FITView.this.findBestInterval(pInterval, mRecordEntries, IntervaType.HEART_RATE);
        mSumIntervalHeartrateTxt.setText(tMaxMinHeart + " bpm");
    }


    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }


    private void onRecordMessage(RecordMesg pMsg) {
        this.mRecordEntries.add(pMsg);
    }

    private void onSessionMessage(SessionMesg pMsg) {
        mSessionMessage = pMsg;
    }

    private String formatElapsedTime(long pSeconds) {
        int hh = (int) (pSeconds / 3600L);
        int mm = (int) ((pSeconds - (hh * 3600L)) / 60L);
        int ss = (int) (pSeconds - (hh * 3600L) - (mm * 60L));
        return String.format("%02d:%02d:%02d", hh, mm, ss);
    }

    private NumberFormat getNumberFormat(int pDigits, int pDecimals) {
        NumberFormat tNBF = NumberFormat.getNumberInstance();
        if (pDecimals >= 0) {
            tNBF.setMaximumFractionDigits(pDecimals);
            tNBF.setMinimumFractionDigits(pDecimals);
        }
        if (pDigits >= 0) {
            tNBF.setMaximumIntegerDigits(pDigits);
            tNBF.setMinimumIntegerDigits(pDigits);
        }

        tNBF.setGroupingUsed(false);
        return tNBF;
    }

    private int MaxMinAvgSubLst(LinkedList<RecordMesg> pSubLst, IntervaType pIntervalType) {
        double tSum = 0;
        for (RecordMesg rm : pSubLst) {
            if (pIntervalType == IntervaType.HEART_RATE) {
                tSum += (double) rm.getHeartRate().intValue();
            }
            if (pIntervalType == IntervaType.POWER) {
                tSum += (double) rm.getPower().intValue();
            }
            if (pIntervalType == IntervaType.CADENCE) {
                tSum += (double) rm.getCadence().intValue();
            }
        }
        double avg = tSum / (double) pSubLst.size();
        return (int) Math.round(avg);
    }

    private IntervalValue findBestInterval(int pIntervalLength, List<RecordMesg> pList, IntervaType pIntervalType) {
        int tPos = 0, x = 0, a = 0;
        int tCurrStartPos = 0;
        int tMax = -1;
        int tMaxOffset = -1;
        IntervalValue mm = new IntervalValue(pIntervalLength);
        Comparator<RecordMesg> tComparator = null;

        mm.mInterval = pIntervalLength;

        LinkedList<RecordMesg> tSubLst = new LinkedList<>();
        if (pIntervalType == IntervaType.HEART_RATE) {
            tComparator = new HeartrateComparator();
        }
        if (pIntervalType == IntervaType.CADENCE) {
            tComparator = new CadenceComparator();
        }
        if (pIntervalType == IntervaType.POWER) {
            tComparator = new PowerComparator();
        }

        tSubLst.add(pList.get(tPos++));
        while (tPos < pList.size()) {
            // Fill the sublist with records for a interval
            while ((tPos < pList.size()) && (pList.get(tPos).getTimestamp().getTimestamp() <= tSubLst.getFirst().getTimestamp().getTimestamp() + pIntervalLength)) {
                tSubLst.add(pList.get(tPos++));
            }
            // Check maxmin in the sublist
            if (pIntervalType == IntervaType.HEART_RATE) {
                x = Collections.min(tSubLst, tComparator).getHeartRate().intValue();
                a = (int) Math.round(tSubLst.stream().mapToInt(rm -> rm.getHeartRate().intValue()).average().orElse(0));
            }
            if (pIntervalType == IntervaType.CADENCE) {
                x = Collections.min(tSubLst, tComparator).getCadence().intValue();
                a = (int) Math.round(tSubLst.stream().mapToInt(rm -> rm.getCadence().intValue()).average().orElse(0));
            }
            if (pIntervalType == IntervaType.POWER) {
                x = Collections.min(tSubLst, tComparator).getPower().intValue();
                a = (int) Math.round(tSubLst.stream().mapToInt(rm -> rm.getPower().intValue()).average().orElse(0));
            }

            if (a > tMax) {
                tMax = a;
                mm.mMaxMinValue = x;
                mm.mAvgValue = a;
                tMaxOffset = tCurrStartPos;

            }
            tSubLst.removeFirst();
            tCurrStartPos++;
        }


        //System.out.println("MaxMin: " + mm);
        return mm;
    }


    private void updateSummaryInfo() {
        SimpleDateFormat tSDF = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        NumberFormat nbf = null;


        // All done, update session data
        // Calculate max interval data
        if (mSessionMessage == null) {
            Popup.showError("No Session Message", "No session message found in the FIT file that was a suprise");
            return;
        }
        // Set Start Time
        if (mSessionMessage.getStartTime() != null) {
            mSumDateTimeTxt.setText(tSDF.format(mSessionMessage.getStartTime().getDate().getTime()));
        } else {
            mSumDateTimeTxt.setText("not found");
        }

        // Set Moving Time
        if (mSessionMessage.getTotalMovingTime() != null) {
            mSumMovingTimeTxt.setText(formatElapsedTime(mSessionMessage.getTotalMovingTime().longValue()));
        } else if (mSessionMessage.getTotalElapsedTime() != null) {
            mSumMovingTimeTxt.setText(formatElapsedTime(mSessionMessage.getTotalElapsedTime().longValue()));
        } else {
            mSumMovingTimeTxt.setText("not found");
        }

        // Set total distance
        nbf = getNumberFormat(2, 0);
        if (mSessionMessage.getTotalDistance() != null) {
            mSumTotalDistanceTxt.setText(nbf.format((mSessionMessage.getTotalDistance().floatValue() / 1000.0d)) + " km.");
        } else {
            mSumTotalDistanceTxt.setText("not found");
        }

        // Set total ascent
        if (mSessionMessage.getTotalAscent() != null) {
            mSumAscentTxt.setText(String.valueOf(mSessionMessage.getTotalAscent().intValue()) + " m.");
        } else {
            mSumAscentTxt.setText("not found");
        }

        // Set avg power
        if (mSessionMessage.getAvgPower() != null) {
            mSumAvgPowerTxt.setText(mSessionMessage.getAvgPower().toString() + " W");
        } else {
            mSumAvgPowerTxt.setText("not found");
        }


        // Set Avg Cadence
        if (mSessionMessage.getAvgCadence() != null) {
            mSumAvgCandenceTxt.setText(mSessionMessage.getAvgCadence().toString() + " rpm");
        } else {
            mSumAvgCandenceTxt.setText("not found");
        }

        // Set Avg Heartrate
        if (mSessionMessage.getAvgHeartRate() != null) {
            mSumAvgHeartrateTxt.setText(mSessionMessage.getAvgHeartRate().toString() + " bpm");
        } else {
            mSumAvgHeartrateTxt.setText("not found");
        }


        // Set Avg Speed
        if (mSessionMessage.getAvgSpeed() != null) {
            nbf = getNumberFormat(-1, 1);
            mSumAvgSpeedTxt.setText(nbf.format((mSessionMessage.getAvgSpeed().floatValue() * 3.6d)) + " km/h");
        } else {
            mSumAvgSpeedTxt.setText("not found");
        }

        // Set Max Power
        if (mSessionMessage.getMaxPower() != null) {
            mSumMaxPowerTxt.setText(mSessionMessage.getMaxPower().toString() + " W");
        } else {
            mSumMaxPowerTxt.setText("not found");
        }

        // Set Max Cadence
        if (mSessionMessage.getMaxCadence() != null) {
            mSumMaxCadenceTxt.setText(mSessionMessage.getMaxCadence().toString() + " rpm");
        } else {
            mSumMaxCadenceTxt.setText("not found");
        }

        // Set Max Heartrate
        if (mSessionMessage.getMaxHeartRate() != null) {
            mSumMaxHeartrateTxT.setText(mSessionMessage.getMaxHeartRate().toString() + " bpm");
        } else {
            mSumMaxHeartrateTxT.setText("not found");
        }

        // Set Max Speed
        if (mSessionMessage.getMaxSpeed() != null) {
            nbf = getNumberFormat(-1, 1);
            mSumMaxSpeedTxt.setText(nbf.format(mSessionMessage.getMaxSpeed().floatValue() * 3.6d) + " km/h");
        } else {
            mSumMaxSpeedTxt.setText("not found");
        }

        // Set Power / HR ratio
        if ((mSessionMessage.getAvgPower() != null) && (mSessionMessage.getAvgHeartRate() != null)) {
            nbf = getNumberFormat(-1, 2);
            double r = (double) mSessionMessage.getAvgPower().floatValue() / (double) mSessionMessage.getAvgHeartRate().floatValue();
            mSumPwrHrTxt.setText(nbf.format(r));
        } else {
            mSumPwrHrTxt.setText("not found");
        }

        // Set calories
        if (mSessionMessage.getTotalCalories() != null) {
            mSumCaloriesTxt.setText(mSessionMessage.getTotalCalories().toString());
        } else {
            mSumCaloriesTxt.setText("not found");
        }

        //Set Overall WKG
        if (mAppCfg.getWeight() == 0) {
            mSumWKgTxt.setText("No weight");
        } else if (mSessionMessage.getAvgPower() != null) {
            double x = mSessionMessage.getAvgPower() / mAppCfg.getWeight();
            NumberFormat nf = getNumberFormat(-1, 1);
            mSumWKgTxt.setText(nf.format(x));
        } else {
            mSumWKgTxt.setText("not found");
        }

        calculateAndUpdateIntervals(mIntervalSlider.getValue());


        double tVAMSum = 0;
        double tVAMEntries = 0;
        VAMCalculator vamc = new VAMCalculator(mAppCfg.getVAMCalculateInterval());
        for (RecordMesg rm : mRecordEntries) {
            double v = vamc.add(rm);
            if (v > 0) {
                tVAMSum += v;
                tVAMEntries++;
            }
        }
        if (tVAMEntries > 0) {
            double x = tVAMSum / tVAMEntries;
            mSumAvgVamTxt.setText(Math.round(x) + " m/h");
        }


    }


    private void onActivityMessage(ActivityMesg pMsg) {
        if (pMsg.getEventType().getValue() == 1) {
            updateSummaryInfo();
        }
    }


    @Override
    public void onMesg(Mesg pMsg) {
        if (pMsg.getNum() == MesgNum.RECORD) {
            onRecordMessage(new RecordMesg(pMsg));
        } else if (pMsg.getNum() == MesgNum.SESSION) {
            onSessionMessage(new SessionMesg(pMsg));
        } else if (pMsg.getNum() == MesgNum.ACTIVITY) {
            onActivityMessage(new ActivityMesg(pMsg));
        }

    }

    static class AppConfiguration {
        public enum UnitType {Metric, Imperial}

        ;


        private static final String PropertyFile = "FITView.cfg";
        private static final String KeyUnitType = "UnitType";
        private static final String KeyWeight = "Weight";
        private static final String KeyPowerSmoothInterval = "PowerSmoothInterval";
        private static final String KeyVAMInterval = "VAMInterval";

        private List<PropertyChangeListener> mChangeListeners;

        private UnitType mUnitType;
        private double mWeight;
        private int mPowerSmoothInterval;
        private int mVAMCalculateInterval;

        public AppConfiguration() {
            mUnitType = UnitType.Metric;
            mPowerSmoothInterval = 5;
            mVAMCalculateInterval = 20;
            mWeight = 0;
            mChangeListeners = new ArrayList<>();
        }

        public String getWeightAsString() {

            if (mWeight == 0) {
                return "";
            }

            NumberFormat nbf = NumberFormat.getNumberInstance();
            nbf.setMinimumIntegerDigits(2);
            nbf.setMinimumFractionDigits(1);
            nbf.setMaximumFractionDigits(1);
            return nbf.format(mWeight).replace(",", ".");
        }

        public double validateWeight(String pValueString) throws Exception {
            double w;

            if ((pValueString == null) || (pValueString.length() == 0)) {
                return 0;
            }


            try {
                w = Double.parseDouble(pValueString);
            } catch (Exception e1) {
                throw new Exception("Invalid rider weight input, must be an numeric value between 20.0 and 222.0");
            }
            if ((w < 20) || (w > 222)) {
                throw new Exception("Invalid rider weight input, must be a value between 20.0 and 222.0");
            }
            return w;
        }


        public void addChangeListener(PropertyChangeListener pListener) {
            mChangeListeners.add(pListener);
        }

        public boolean removeChangeListener(PropertyChangeListener pListener) {
            return mChangeListeners.remove(pListener);
        }

        private void notifyListeners() {
            PropertyChangeEvent tEvent = new PropertyChangeEvent(this, "FITViewCfg", null, null);
            for (PropertyChangeListener l : mChangeListeners) {
                l.propertyChange(tEvent);
            }
        }

        public void saveProperties() {
            try {
                FileOutputStream tOut = new FileOutputStream(PropertyFile);
                Properties tProp = new Properties();
                tProp.setProperty(KeyPowerSmoothInterval, String.valueOf(getPowerSmoothInterval()));
                tProp.setProperty(KeyUnitType, getUnitType().toString());
                tProp.setProperty(KeyVAMInterval, String.valueOf(getVAMCalculateInterval()));
                tProp.setProperty(KeyWeight, String.valueOf(getWeight()));
                tProp.store(tOut, null);
                tOut.flush();
                tOut.close();
                notifyListeners();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void loadProperties() {
            File tFile = new File(PropertyFile);
            if (!tFile.exists()) {
                //System.out.println("FITView properties (\"" + PropertyFile + "\") are not found");
                return;
            }
            try {
                FileInputStream tIn = new FileInputStream(tFile);
                Properties tProp = new Properties();
                tProp.load(tIn);
                setPowerSmoothInterval(Integer.parseInt(tProp.getProperty(KeyPowerSmoothInterval, "5")));
                setVAMCalculateInterval(Integer.parseInt(tProp.getProperty(KeyVAMInterval, "20")));
                setUnitType(UnitType.valueOf(tProp.getProperty(KeyUnitType, UnitType.Metric.toString())));
                setWeight(Double.parseDouble(tProp.getProperty(KeyWeight, "0")));
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }


        public void saveAndNotify() {
            this.saveProperties();
        }


        public UnitType getUnitType() {
            return mUnitType;
        }

        public void setUnitType(UnitType mUnitType) {
            this.mUnitType = mUnitType;
        }

        public double getWeight() {
            return mWeight;
        }

        public void setWeight(double mWeight) {
            this.mWeight = mWeight;
        }

        public int getPowerSmoothInterval() {
            return mPowerSmoothInterval;
        }

        public void setPowerSmoothInterval(int mPowerSmoothInterval) {
            this.mPowerSmoothInterval = mPowerSmoothInterval;
        }

        public int getVAMCalculateInterval() {
            return mVAMCalculateInterval;
        }

        public void setVAMCalculateInterval(int mVAMCalculateInterval) {
            this.mVAMCalculateInterval = mVAMCalculateInterval;
        }
    }

    class HeartrateComparator implements Comparator<RecordMesg> {
        @Override
        public int compare(RecordMesg o1, RecordMesg o2) {
            if (o1.getHeartRate().intValue() < o2.getHeartRate().intValue()) {
                return -1;
            }
            if (o1.getHeartRate().intValue() > o2.getHeartRate().intValue()) {
                return 1;
            }
            return 0;
        }
    }

    class IntervalValue {
        int mMaxMinValue;
        int mAvgValue;
        int mInterval;

        IntervalValue(int pInterval) {
            mInterval = pInterval;
        }

        @Override
        public String toString() {
            return String.valueOf(mAvgValue) + " (" + String.valueOf(mMaxMinValue) + ")";
        }

    }

    class CadenceComparator implements Comparator<RecordMesg> {
        @Override
        public int compare(RecordMesg o1, RecordMesg o2) {
            if (o1.getCadence().intValue() < o2.getCadence().intValue()) {
                return -1;
            }
            if (o1.getCadence().intValue() > o2.getCadence().intValue()) {
                return 1;
            }
            return 0;
        }
    }

    class PowerComparator implements Comparator<RecordMesg> {
        @Override
        public int compare(RecordMesg o1, RecordMesg o2) {
            if (o1.getPower().intValue() < o2.getPower().intValue()) {
                return -1;
            }
            if (o1.getPower().intValue() > o2.getPower().intValue()) {
                return 1;
            }
            return 0;
        }
    }

    class FITDecoder implements MesgListener {
        private String mFitFilename;
        private FileInputStream mIn;
        private Decode mDecode;
        private MesgListener mListener;


        FITDecoder(String pInFilename, MesgListener pListner) {
            mFitFilename = pInFilename;
            mListener = pListner;
        }

        public void decode() throws Exception {
            try {
                mIn = new FileInputStream(mFitFilename);
            } catch (IOException e) {
                throw new IOException("Failed to open file \"" + mFitFilename + "\" reason: " + e.getMessage());
            }

            try {
                mDecode = new Decode();
                if (!mDecode.checkFileIntegrity(mIn)) {
                    throw new IOException("FIT file integrity failed.");
                }
            } catch (Exception e1) {
                throw new IOException("FIT file integrity failed, reason: " + e1.getMessage());
            }
            mIn.close();

            /**
             * OK, ready to go
             */
            mIn = new FileInputStream(mFitFilename);
            mDecode.read(mIn, this);
            mIn.close();
        }

        @Override
        public void onMesg(Mesg mesg) {
            this.mListener.onMesg(mesg);
        }
    }
}
