package com.hoddmimes.fitview;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.util.RelativeDateFormat;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.data.time.*;
import org.jfree.data.xy.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.text.NumberFormat;
import java.util.Date;
import java.util.Random;

public class XYChart extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel mBottomPanel;
    private JPanel mCenterPanel;
    private JPanel mChartPanel;

    private Random mRnd;

    public XYChart() {
        mRnd = new Random();

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        XYChart dialog = new XYChart();
        dialog.initApp();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    private NumberFormat createNumberFormat(int pDigits) {
        NumberFormat n = NumberFormat.getNumberInstance();
        n.setGroupingUsed(false);
        n.setMaximumFractionDigits(0);
        n.setMinimumIntegerDigits(pDigits);
        n.setMaximumIntegerDigits(pDigits);
        return n;
    }

    private void initApp() {
        XYSeries tPowerSeries = generateData("Power", 3600, 16, 5, 0.666, 156, 98, 428, 120);


        XYSeries series1 = new XYSeries("Series 1");
        for (int i = 1; i < 10; i++) {
            series1.add(i, i);
        }


        XYBarDataset tPowerSet = new XYBarDataset(new XYSeriesCollection(series1), 1.0);


        JFreeChart tChart = ChartFactory.createXYBarChart(
                "",
                "",
                true,
                "",
                tPowerSet,
                PlotOrientation.VERTICAL,
                false,
                true,
                false);


        XYPlot tPlot = (XYPlot) tChart.getPlot();

        XYBarRenderer tRenderer = new XYBarRenderer();

        tRenderer.setSeriesToolTipGenerator(0, new ToolTipGenerator());
        tRenderer.setMargin(-2);
        tRenderer.setShadowVisible(false);
        tRenderer.setAutoPopulateSeriesFillPaint(true);
        tPlot.setRenderer(tRenderer);


        RelativeDateFormat tRelativeFormat = new RelativeDateFormat();
        tRelativeFormat.setShowZeroDays(false);
        tRelativeFormat.setShowZeroHours(false);
        tRelativeFormat.setHourSuffix(":");
        tRelativeFormat.setMinuteSuffix(":");
        tRelativeFormat.setSecondSuffix("");
        tRelativeFormat.setHourFormatter(createNumberFormat(2));
        tRelativeFormat.setMinuteFormatter(createNumberFormat(2));
        tRelativeFormat.setSecondFormatter(createNumberFormat(2));


        //
        ChartPanel tChartPanel = new ChartPanel(tChart);
        //tChartPanel.setMouseWheelEnabled(true);
        tChartPanel.setPreferredSize(new Dimension(800, 400));

        this.mChartPanel.add(tChartPanel, BorderLayout.CENTER);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        mBottomPanel = new JPanel();
        mBottomPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(mBottomPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mBottomPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        mBottomPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mCenterPanel = new JPanel();
        mCenterPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(mCenterPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mChartPanel = new JPanel();
        mChartPanel.setLayout(new BorderLayout(0, 0));
        mCenterPanel.add(mChartPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private class ToolTipGenerator implements XYToolTipGenerator {
        @Override
        public String generateToolTip(XYDataset pDataSet, int pSeries, int pItem) {

            //System.out.println("Series: " + pSeries + " Item: " + pItem);

            if (pDataSet instanceof TimeSeriesCollection) {
                TimeSeriesCollection tCollection = (TimeSeriesCollection) pDataSet;
                TimeSeries tSeries = (TimeSeries) tCollection.getSeries().get(pSeries);
                TimeSeriesDataItem tItem = tSeries.getDataItem(pItem);
                System.out.println("Item: " + pItem + " Y: " + tItem.getValue() + " X: " + tItem.getPeriod().getFirstMillisecond());
            }

            return null;
        }
    }

    private XYSeries generateData(String pName, int pEntries, int pTrendLengt, int pTrendStepSize, double pChancePositiv, int pStartValue, int pMin, int pMax, int pInterval) {
        long tStartTime = System.currentTimeMillis();

        XYSeries tSeries = new XYSeries(pName);
        int tCount = 0, s = 0;
        double tValue = (int) pStartValue;
        while (tCount < pEntries) {
            boolean tUp = ((mRnd.nextDouble() <= pChancePositiv) && (tValue < pMax)) ? true : false;
            int tSteps = 1 + mRnd.nextInt(pTrendLengt);
            for (int i = 0; (i < tSteps) && (tCount < pEntries); i++) {
                s = mRnd.nextInt(pTrendStepSize);
                if (tUp) {
                    tValue += s;
                } else {
                    tValue -= s;
                }
                if (tValue > pMax) {
                    tValue = pMax;
                }
                if (tValue < pMin) {
                    tValue = pMin;
                }
                tCount++;
                long tTime = tStartTime + (tCount * 1000L);
                if (pInterval == 0) {
                    tSeries.add(tTime, tValue);
                } else if ((tCount % pInterval) == 0) {
                    tSeries.add(tTime, tValue);

                }
            }
        }
        return tSeries;
    }


    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

}
